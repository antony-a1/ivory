/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ambiata.ivory.core.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftDictionaryFeatureMeta implements org.apache.thrift.TBase<ThriftDictionaryFeatureMeta, ThriftDictionaryFeatureMeta._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftDictionaryFeatureMeta> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftDictionaryFeatureMeta");

  private static final org.apache.thrift.protocol.TField ENCODING_FIELD_DESC = new org.apache.thrift.protocol.TField("encoding", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOMBSTONE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("tombstoneValue", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftDictionaryFeatureMetaStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftDictionaryFeatureMetaTupleSchemeFactory());
  }

  /**
   * 
   * @see ThriftDictionaryEncoding
   */
  public ThriftDictionaryEncoding encoding; // required
  /**
   * 
   * @see ThriftDictionaryType
   */
  public ThriftDictionaryType type; // required
  public String desc; // required
  public List<String> tombstoneValue; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ThriftDictionaryEncoding
     */
    ENCODING((short)1, "encoding"),
    /**
     * 
     * @see ThriftDictionaryType
     */
    TYPE((short)2, "type"),
    DESC((short)3, "desc"),
    TOMBSTONE_VALUE((short)4, "tombstoneValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ENCODING
          return ENCODING;
        case 2: // TYPE
          return TYPE;
        case 3: // DESC
          return DESC;
        case 4: // TOMBSTONE_VALUE
          return TOMBSTONE_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ENCODING, new org.apache.thrift.meta_data.FieldMetaData("encoding", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftDictionaryEncoding.class)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThriftDictionaryType.class)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOMBSTONE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("tombstoneValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftDictionaryFeatureMeta.class, metaDataMap);
  }

  public ThriftDictionaryFeatureMeta() {
  }

  public ThriftDictionaryFeatureMeta(
    ThriftDictionaryEncoding encoding,
    ThriftDictionaryType type,
    String desc,
    List<String> tombstoneValue)
  {
    this();
    this.encoding = encoding;
    this.type = type;
    this.desc = desc;
    this.tombstoneValue = tombstoneValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftDictionaryFeatureMeta(ThriftDictionaryFeatureMeta other) {
    if (other.isSetEncoding()) {
      this.encoding = other.encoding;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetTombstoneValue()) {
      List<String> __this__tombstoneValue = new ArrayList<String>(other.tombstoneValue);
      this.tombstoneValue = __this__tombstoneValue;
    }
  }

  public ThriftDictionaryFeatureMeta deepCopy() {
    return new ThriftDictionaryFeatureMeta(this);
  }

  @Override
  public void clear() {
    this.encoding = null;
    this.type = null;
    this.desc = null;
    this.tombstoneValue = null;
  }

  /**
   * 
   * @see ThriftDictionaryEncoding
   */
  public ThriftDictionaryEncoding getEncoding() {
    return this.encoding;
  }

  /**
   * 
   * @see ThriftDictionaryEncoding
   */
  public ThriftDictionaryFeatureMeta setEncoding(ThriftDictionaryEncoding encoding) {
    this.encoding = encoding;
    return this;
  }

  public void unsetEncoding() {
    this.encoding = null;
  }

  /** Returns true if field encoding is set (has been assigned a value) and false otherwise */
  public boolean isSetEncoding() {
    return this.encoding != null;
  }

  public void setEncodingIsSet(boolean value) {
    if (!value) {
      this.encoding = null;
    }
  }

  /**
   * 
   * @see ThriftDictionaryType
   */
  public ThriftDictionaryType getType() {
    return this.type;
  }

  /**
   * 
   * @see ThriftDictionaryType
   */
  public ThriftDictionaryFeatureMeta setType(ThriftDictionaryType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public ThriftDictionaryFeatureMeta setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public int getTombstoneValueSize() {
    return (this.tombstoneValue == null) ? 0 : this.tombstoneValue.size();
  }

  public java.util.Iterator<String> getTombstoneValueIterator() {
    return (this.tombstoneValue == null) ? null : this.tombstoneValue.iterator();
  }

  public void addToTombstoneValue(String elem) {
    if (this.tombstoneValue == null) {
      this.tombstoneValue = new ArrayList<String>();
    }
    this.tombstoneValue.add(elem);
  }

  public List<String> getTombstoneValue() {
    return this.tombstoneValue;
  }

  public ThriftDictionaryFeatureMeta setTombstoneValue(List<String> tombstoneValue) {
    this.tombstoneValue = tombstoneValue;
    return this;
  }

  public void unsetTombstoneValue() {
    this.tombstoneValue = null;
  }

  /** Returns true if field tombstoneValue is set (has been assigned a value) and false otherwise */
  public boolean isSetTombstoneValue() {
    return this.tombstoneValue != null;
  }

  public void setTombstoneValueIsSet(boolean value) {
    if (!value) {
      this.tombstoneValue = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ENCODING:
      if (value == null) {
        unsetEncoding();
      } else {
        setEncoding((ThriftDictionaryEncoding)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((ThriftDictionaryType)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case TOMBSTONE_VALUE:
      if (value == null) {
        unsetTombstoneValue();
      } else {
        setTombstoneValue((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ENCODING:
      return getEncoding();

    case TYPE:
      return getType();

    case DESC:
      return getDesc();

    case TOMBSTONE_VALUE:
      return getTombstoneValue();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ENCODING:
      return isSetEncoding();
    case TYPE:
      return isSetType();
    case DESC:
      return isSetDesc();
    case TOMBSTONE_VALUE:
      return isSetTombstoneValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftDictionaryFeatureMeta)
      return this.equals((ThriftDictionaryFeatureMeta)that);
    return false;
  }

  public boolean equals(ThriftDictionaryFeatureMeta that) {
    if (that == null)
      return false;

    boolean this_present_encoding = true && this.isSetEncoding();
    boolean that_present_encoding = true && that.isSetEncoding();
    if (this_present_encoding || that_present_encoding) {
      if (!(this_present_encoding && that_present_encoding))
        return false;
      if (!this.encoding.equals(that.encoding))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_tombstoneValue = true && this.isSetTombstoneValue();
    boolean that_present_tombstoneValue = true && that.isSetTombstoneValue();
    if (this_present_tombstoneValue || that_present_tombstoneValue) {
      if (!(this_present_tombstoneValue && that_present_tombstoneValue))
        return false;
      if (!this.tombstoneValue.equals(that.tombstoneValue))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ThriftDictionaryFeatureMeta other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEncoding()).compareTo(other.isSetEncoding());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncoding()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encoding, other.encoding);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTombstoneValue()).compareTo(other.isSetTombstoneValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTombstoneValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tombstoneValue, other.tombstoneValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftDictionaryFeatureMeta(");
    boolean first = true;

    sb.append("encoding:");
    if (this.encoding == null) {
      sb.append("null");
    } else {
      sb.append(this.encoding);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tombstoneValue:");
    if (this.tombstoneValue == null) {
      sb.append("null");
    } else {
      sb.append(this.tombstoneValue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftDictionaryFeatureMetaStandardSchemeFactory implements SchemeFactory {
    public ThriftDictionaryFeatureMetaStandardScheme getScheme() {
      return new ThriftDictionaryFeatureMetaStandardScheme();
    }
  }

  private static class ThriftDictionaryFeatureMetaStandardScheme extends StandardScheme<ThriftDictionaryFeatureMeta> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftDictionaryFeatureMeta struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ENCODING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.encoding = ThriftDictionaryEncoding.findByValue(iprot.readI32());
              struct.setEncodingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = ThriftDictionaryType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOMBSTONE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.tombstoneValue = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.tombstoneValue.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setTombstoneValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftDictionaryFeatureMeta struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.encoding != null) {
        oprot.writeFieldBegin(ENCODING_FIELD_DESC);
        oprot.writeI32(struct.encoding.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      if (struct.tombstoneValue != null) {
        oprot.writeFieldBegin(TOMBSTONE_VALUE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tombstoneValue.size()));
          for (String _iter3 : struct.tombstoneValue)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftDictionaryFeatureMetaTupleSchemeFactory implements SchemeFactory {
    public ThriftDictionaryFeatureMetaTupleScheme getScheme() {
      return new ThriftDictionaryFeatureMetaTupleScheme();
    }
  }

  private static class ThriftDictionaryFeatureMetaTupleScheme extends TupleScheme<ThriftDictionaryFeatureMeta> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftDictionaryFeatureMeta struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEncoding()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      if (struct.isSetDesc()) {
        optionals.set(2);
      }
      if (struct.isSetTombstoneValue()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEncoding()) {
        oprot.writeI32(struct.encoding.getValue());
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetTombstoneValue()) {
        {
          oprot.writeI32(struct.tombstoneValue.size());
          for (String _iter4 : struct.tombstoneValue)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftDictionaryFeatureMeta struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.encoding = ThriftDictionaryEncoding.findByValue(iprot.readI32());
        struct.setEncodingIsSet(true);
      }
      if (incoming.get(1)) {
        struct.type = ThriftDictionaryType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.tombstoneValue = new ArrayList<String>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            String _elem7;
            _elem7 = iprot.readString();
            struct.tombstoneValue.add(_elem7);
          }
        }
        struct.setTombstoneValueIsSet(true);
      }
    }
  }

}

